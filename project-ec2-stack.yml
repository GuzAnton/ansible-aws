- name: Create ec2 stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks: 
    
    - name: Import VPC setup variables
      include_vars: vars/output_vars

    - name: Import VPC setup
      include_vars: vars/vpc_setup

    - name: Create PROJECT ec2 key
      ec2_key:
        name: ec2-project-key
        region: "{{region}}"
      register: key_pair_out
  
    - name: Save key in a file
      copy: 
        content: "key_pair_out.key.private_key"
        dest: "./ec2-project-key.pem"
        mode: 0600
      when: key_pair_out.changed

    - name: Create SG for ELB
      ec2_group:
        name: Project_ELB-SG
        description: Allow port 80 from anywhere and all ports within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: ProjectELBSG_out

    - name: Create SG for ec2 stack
      ec2_group:
        name: Project_ec2_SG
        description: Allow port 22 from everywhere and all ports within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ProjectELBSG_out.group_id}}"
          
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
      register:  Project_ec2_SG_out

    - name: Update ec2 SG to allow all traffic in this SG. For host internal communication
      ec2_group:
        name: Project_ec2_SG
        description: Allow all traffic internally for all ec2 hosts
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{Project_ec2_SG_out.group_id}}"


    - name: Creating NGINX web01
      ec2_instance:
        name: "web01"
        key_name: "ec2-project-key"
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "web01"
          Project: Test_Project
          Owner: Tony
        exact_count: 1
        security_group: "{{Project_ec2_SG_out.group_id}}"
        vpc_subnet_id: "{{pubsub1id}}"
      register: web01_out  

    - name: Creating Tomcat app01
      ec2_instance:
        name: "app01"
        key_name: "ec2-project-key"
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "app01"
          Project: Test_Project
          Owner: Tony
        exact_count: 1
        security_group: "{{Project_ec2_SG_out.group_id}}"
        vpc_subnet_id: "{{pubsub1id}}"
      register: app01_out  
    
    - name: Creating Memcache mc01
      ec2_instance:
        name: "mc01"
        key_name: "ec2-project-key"
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "mc01"
          Project: Test_Project
          Owner: Tony
        exact_count: 1
        security_group: "{{Project_ec2_SG_out.group_id}}"
        vpc_subnet_id: "{{pubsub1id}}"
      register: mc01_out
    
    - name: Creating RabbitMQ rmq01
      ec2_instance:
        name: "rmq01"
        key_name: "ec2-project-key"
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "rmq01"
          Project: Test_Project
          Owner: Tony
        exact_count: 1
        security_group: "{{Project_ec2_SG_out.group_id}}"
        vpc_subnet_id: "{{pubsub1id}}"
      register: rmq01_out

    - name: Creating Mysql db01
      ec2_instance:
        name: "db01"
        key_name: "ec2-project-key"
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "db01"
          Project: Test_Project
          Owner: Tony
        exact_count: 1
        security_group: "{{Project_ec2_SG_out.group_id}}"
        vpc_subnet_id: "{{pubsub1id}}"
      register: db01_out

    - debug:
        var: db01_out.instances[0].instance_id

    - local_action:
        module: ec2_elb_lb
        region: "{{region}}"
        state: present 
        name: "Project-ELB" 
        listeners:
          - protocol: http # optional are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80
        instance_ids:
          - "{{web01_out.instances[0].instance_id}}"  
        purge_instance_ids: True 
        security_group_ids: "{{ProjectELBSG_out.group_id}}"
        subnets: 
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"

    - name: Create directory provision-stack and group_vars
      hosts: localhost
      tasks:
        - name: Create provision-stack
          file:
            path: "provision-stack"
            state: directory

        - name: Создать папку group_vars внутри provision-stack
          file:
            path: "provision-stack/group_vars"
            state: directory


    - name: Insert/update Hosts ip & Name in file provision-stack/group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip # required. The file to modify. Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name).
        block: |
          web01_ip: {{web01_out.instances[0].private_ip_address}}
          app01_ip: {{app01_out.instances[0].private_ip_address}}
          rmq01_ip: {{rmq01_out.instances[0].private_ip_address}}
          mc01_ip: {{mc01_out.instances[0].private_ip_address}}
          db01_ip: {{db01_out.instances[0].private_ip_address}}

    - name: Copy key to provision-stack directory
      copy:
        src: ec2-project-key.pem
        dest: provision-stack/ec2-project-key.pem
        mode: 0400

    - name: Insert/update Inventory file provision-stack/inventory
      blockinfile:
        path: provision-stack/inventory
        block: |
          web01 ansible_host={{web01_out.instances[0].private_ip_address}}
          app01 ansible_host={{app01_out.instances[0].private_ip_address}}
          rmq01 ansible_host={{rmq01_out.instances[0].private_ip_address}}
          mc01 ansible_host={{mc01_out.instances[0].private_ip_address}}
          db01 ansible_host={{db01_out.instances[0].private_ip_address}}
          cntl ansible_host=127.0.0.1 ansible_connection=local
          [websrvgrp]
          web01
          [appsrvgrp]
          app01
          [rmqsrvgrp]
          rmq01
          [mcsrvgrp]
          mc01
          [dbsrvgrp]
          db01
          [control]
          cntl
          
          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=ec2-project-key.pem
